class FFI::UCtags
  type members[T] = Array[T]
  type stack_entry[T] = [members[T], ^(members[T] members, String? namespace) -> void, String?]
  type composite_type = singleton(FFI::Struct) | FFI::Enum
  
  VERSION: String
  
  attr_accessor self.ffi_module: Module
  
  def self.ffi_const: (Object::name name) -> bot
  def ffi_const: (Object::name name) -> bot
  
  private def self.new: (_ToS library_name) -> instance
  def self.call: (_ToS library_name, _ToS header_path) ?{ () [self: FFI::library] -> void } -> FFI::library
  
  attr_reader library: FFI::library
  attr_reader composite_types: Hash[Symbol, Symbol | composite_type]
  attr_reader composite_typedefs: Hash[Symbol, composite_type]
  attr_reader composite_namespacing: Hash[composite_type, singleton(FFI::Struct)]
  attr_reader stack: Array[stack_entry[untyped]]
  @fields: Hash[String, String]
  def initialize: (_ToS library_name) -> void
  
  def new_construct: [T] () ?{ (members[T] members, String? namespace) -> void } -> String?
  def stack_push: [T] (*T elements) -> void
  
  def extract_type: () -> [String, bool?]
  def find_type: (String name) -> FFI::Type
  def composite_type: (String name) -> composite_type
  def extract_and_process_type: () -> FFI::Type
  
  def process: (String k, String name, Hash[String, String] fields) -> void
  
  def struct: (Symbol superclass, Symbol name) -> singleton(FFI::Struct)
  def new_composite: [T] () ?{ (members[T] members) -> void } -> String?
  def typedef: (Symbol name) -> (FFI::Type | composite_type)
  
  def const_composites: () -> Array[Symbol]
  def close: () -> FFI::library
end
