class FFI::UCtags
  type ffi_library = Module & FFI::Library
  type fields = Hash[String, String]
  
  
  VERSION: String
  
  attr_accessor self.ffi_module: Module
  
  def self.ffi_const: (Object::name name) -> bot
  def ffi_const: (Object::name name) -> bot
  
  def self.call: (_ToS library_name, _ToS header_path) -> ffi_library
  
  
  attr_reader library: ffi_library
  attr_reader composite_types: Hash[Symbol, Symbol | Class]
  attr_reader composite_typedefs: Hash[Symbol, Class]
  attr_accessor construct_builder: (^() -> void)?
  attr_reader construct_members: Array[untyped]
  def initialize: (_ToS library_name) -> void
  
  def new_construct: () ?{ () -> void } -> void
  
  def extract_type: (fields fields) -> [String, bool?]
  def find_type: (String name) -> FFI::Type
  def composite_type: (String name) -> Class
  def extract_and_process_type: (fields fields) -> FFI::Type
  
  def process_kind: (String k, String name, fields fields) -> void
  def struct: (Symbol superclass, String name) -> Class
  def typedef: (String name, fields fields) -> void
  
  def finish: -> ffi_library
end
